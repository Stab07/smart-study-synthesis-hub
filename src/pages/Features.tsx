
import { useState } from 'react';
import { FileText, Headphones, MessageSquare, ArrowRight, Play, Pause, Volume2, Loader2 } from 'lucide-react';
import MainLayout from '@/components/layout/MainLayout';
import { Button } from '@/components/ui/button';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Textarea } from '@/components/ui/textarea';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Badge } from '@/components/ui/badge';
import { Slider } from '@/components/ui/slider';
import { toast } from "@/components/ui/sonner";

const Features = () => {
  const [activeTab, setActiveTab] = useState('text-to-speech');
  
  // Text-to-speech state
  const [ttsText, setTtsText] = useState('');
  const [ttsLoading, setTtsLoading] = useState(false);
  const [isPlaying, setIsPlaying] = useState(false);
  const [volume, setVolume] = useState(0.7);
  const [currentTime, setCurrentTime] = useState(0);
  const [duration, setDuration] = useState(100);
  
  // Summarization state
  const [originalText, setOriginalText] = useState('');
  const [summary, setSummary] = useState('');
  const [summaryLoading, setSummaryLoading] = useState(false);
  
  // Chatbot state
  const [chatMessage, setChatMessage] = useState('');
  const [chatMessages, setChatMessages] = useState<{ sender: 'user' | 'bot', message: string }[]>([
    { sender: 'bot', message: 'Hi there! I\'m your SpeakSmart AI assistant. How can I help you today?' }
  ]);
  const [chatLoading, setChatLoading] = useState(false);

  // Handle TTS conversion
  const handleTextToSpeech = () => {
    if (!ttsText.trim()) {
      toast("Please enter some text to convert to speech");
      return;
    }
    
    setTtsLoading(true);
    
    // Simulate API call for demo purposes
    setTimeout(() => {
      setTtsLoading(false);
      toast.success("Text converted to speech successfully!");
      // In a real implementation, you would get an audio URL from your API
      // and set it to the audio element's src
      setIsPlaying(true);
    }, 2000);
  };
  
  // Handle text summarization
  const handleSummarize = () => {
    if (!originalText.trim()) {
      toast("Please enter some text to summarize");
      return;
    }
    
    setSummaryLoading(true);
    
    // Simulate API call for demo purposes
    setTimeout(() => {
      setSummaryLoading(false);
      const generatedSummary = "This is a demonstration of the SpeakSmart AI summarization feature. In a real implementation, this would be a concise summary of the text you entered, generated by our AI model using advanced natural language processing techniques.";
      setSummary(generatedSummary);
      toast.success("Text summarized successfully!");
    }, 2000);
  };
  
  // Handle sending a chat message
  const handleSendMessage = (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!chatMessage.trim()) return;
    
    // Add user message
    const userMsg = chatMessage.trim();
    setChatMessages(prev => [...prev, { sender: 'user', message: userMsg }]);
    setChatMessage('');
    setChatLoading(true);
    
    // Simulate API call for demo purposes
    setTimeout(() => {
      let response = "";
      
      if (userMsg.toLowerCase().includes('summarize') || userMsg.toLowerCase().includes('summary')) {
        response = "I can help summarize your documents! Simply upload a document or paste text, and I'll create a concise summary highlighting the key points.";
      } else if (userMsg.toLowerCase().includes('speak') || userMsg.toLowerCase().includes('audio') || userMsg.toLowerCase().includes('voice')) {
        response = "With SpeakSmart AI, you can convert any text to natural-sounding speech. Perfect for listening to documents on the go!";
      } else if (userMsg.toLowerCase().includes('math') || userMsg.toLowerCase().includes('equation')) {
        response = "SpeakSmart AI can recognize and explain mathematical concepts in your documents. It identifies equations and provides step-by-step explanations.";
      } else {
        response = "Thanks for your message! SpeakSmart AI helps students learn more effectively through AI-powered summarization, text-to-speech conversion, math interpretation, and conversational assistance. How can I assist you today?";
      }
      
      setChatMessages(prev => [...prev, { sender: 'bot', message: response }]);
      setChatLoading(false);
    }, 1500);
  };
  
  // Handle audio playback controls
  const handlePlayPause = () => {
    setIsPlaying(!isPlaying);
  };
  
  const handleVolumeChange = (value: number[]) => {
    setVolume(value[0]);
  };
  
  const handleSeek = (value: number[]) => {
    setCurrentTime(value[0]);
  };

  const formatTime = (time: number) => {
    const minutes = Math.floor(time / 60);
    const seconds = Math.floor(time % 60);
    return `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;
  };
  
  return (
    <MainLayout>
      <div className="py-8 bg-gray-50 dark:bg-gray-800 min-h-screen">
        <div className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="text-center mb-12">
            <h1 className="text-4xl font-bold text-gray-900 dark:text-white mb-4">SpeakSmart AI Features</h1>
            <p className="text-xl text-gray-600 dark:text-gray-300 max-w-3xl mx-auto">
              Discover our powerful AI tools designed to enhance your learning experience
            </p>
          </div>
          
          <Tabs defaultValue="text-to-speech" value={activeTab} onValueChange={setActiveTab} className="space-y-8">
            <TabsList className="grid grid-cols-3 max-w-md mx-auto">
              <TabsTrigger value="text-to-speech" className="flex items-center gap-2">
                <Headphones className="h-4 w-4" />
                <span className="hidden sm:inline">Text to Speech</span>
              </TabsTrigger>
              <TabsTrigger value="summarization" className="flex items-center gap-2">
                <FileText className="h-4 w-4" />
                <span className="hidden sm:inline">Summarization</span>
              </TabsTrigger>
              <TabsTrigger value="chatbot" className="flex items-center gap-2">
                <MessageSquare className="h-4 w-4" />
                <span className="hidden sm:inline">AI Chatbot</span>
              </TabsTrigger>
            </TabsList>
            
            {/* Text to Speech Tab */}
            <TabsContent value="text-to-speech">
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Headphones className="h-5 w-5 text-brand-500" />
                    Text to Speech Conversion
                  </CardTitle>
                  <CardDescription>
                    Convert any text into natural-sounding speech with our advanced text-to-speech technology.
                  </CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <Textarea 
                    placeholder="Enter text to convert to speech..."
                    className="min-h-[200px]"
                    value={ttsText}
                    onChange={(e) => setTtsText(e.target.value)}
                  />
                  
                  {/* Audio Player (shows after conversion) */}
                  {isPlaying && (
                    <div className="bg-gray-100 dark:bg-gray-800 rounded-lg p-4 mt-4">
                      <div className="flex flex-col space-y-2">
                        <div className="flex items-center justify-between">
                          <span className="text-xs text-gray-500 dark:text-gray-400">{formatTime(currentTime)}</span>
                          <span className="text-xs text-gray-500 dark:text-gray-400">{formatTime(duration)}</span>
                        </div>
                        
                        <Slider
                          value={[currentTime]}
                          max={duration}
                          step={0.1}
                          onValueChange={handleSeek}
                          className="w-full"
                        />
                        
                        <div className="flex items-center justify-between">
                          <div className="flex items-center space-x-2">
                            <Volume2 className="h-4 w-4 text-gray-700 dark:text-gray-300" />
                            <Slider
                              value={[volume]}
                              max={1}
                              step={0.01}
                              onValueChange={handleVolumeChange}
                              className="w-20"
                            />
                          </div>
                          
                          <Button
                            size="sm"
                            variant="outline"
                            className="rounded-full p-2"
                            onClick={handlePlayPause}
                          >
                            {isPlaying ? <Pause className="h-4 w-4" /> : <Play className="h-4 w-4" />}
                          </Button>
                          
                          <div className="flex items-center">
                            <Badge variant="outline" className="flex items-center">
                              1.0x
                            </Badge>
                          </div>
                        </div>
                      </div>
                    </div>
                  )}
                </CardContent>
                <CardFooter>
                  <Button 
                    onClick={handleTextToSpeech} 
                    className="w-full"
                    disabled={ttsLoading || !ttsText.trim()}
                  >
                    {ttsLoading ? (
                      <>
                        <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                        Converting...
                      </>
                    ) : (
                      <>
                        <Headphones className="h-4 w-4 mr-2" />
                        Convert to Speech
                      </>
                    )}
                  </Button>
                </CardFooter>
              </Card>
            </TabsContent>
            
            {/* Summarization Tab */}
            <TabsContent value="summarization">
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <FileText className="h-5 w-5 text-brand-500" />
                    Text Summarization
                  </CardTitle>
                  <CardDescription>
                    Extract key points from lengthy documents using our AI-powered summarization tool.
                  </CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="grid grid-cols-1 lg:grid-cols-2 gap-4">
                    <div>
                      <h3 className="text-sm font-medium mb-2">Original Text</h3>
                      <Textarea 
                        placeholder="Enter or paste text to summarize..."
                        className="min-h-[300px]"
                        value={originalText}
                        onChange={(e) => setOriginalText(e.target.value)}
                      />
                    </div>
                    <div>
                      <h3 className="text-sm font-medium mb-2">Summary</h3>
                      <div className="min-h-[300px] bg-gray-50 dark:bg-gray-800 border rounded-md p-3">
                        {summaryLoading ? (
                          <div className="flex items-center justify-center h-full">
                            <Loader2 className="h-6 w-6 animate-spin text-brand-500" />
                          </div>
                        ) : summary ? (
                          <p className="text-gray-700 dark:text-gray-300">{summary}</p>
                        ) : (
                          <p className="text-gray-400 dark:text-gray-500 italic">Your summary will appear here...</p>
                        )}
                      </div>
                    </div>
                  </div>
                </CardContent>
                <CardFooter>
                  <Button 
                    onClick={handleSummarize} 
                    className="w-full"
                    disabled={summaryLoading || !originalText.trim()}
                  >
                    {summaryLoading ? (
                      <>
                        <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                        Summarizing...
                      </>
                    ) : (
                      <>
                        <FileText className="h-4 w-4 mr-2" />
                        Summarize Text
                      </>
                    )}
                  </Button>
                </CardFooter>
              </Card>
            </TabsContent>
            
            {/* Chatbot Tab */}
            <TabsContent value="chatbot">
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <MessageSquare className="h-5 w-5 text-brand-500" />
                    AI Chatbot
                  </CardTitle>
                  <CardDescription>
                    Ask questions about your documents and get instant answers from our intelligent AI assistant.
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="border rounded-lg h-[400px] flex flex-col">
                    <ScrollArea className="flex-1 p-4">
                      <div className="space-y-4">
                        {chatMessages.map((msg, index) => (
                          <div 
                            key={index} 
                            className={`flex ${msg.sender === 'user' ? 'justify-end' : 'justify-start'}`}
                          >
                            <div 
                              className={`max-w-[80%] rounded-lg p-3 ${
                                msg.sender === 'user' 
                                  ? 'bg-brand-100 text-gray-800 dark:bg-brand-900 dark:text-gray-100' 
                                  : 'bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-100'
                              }`}
                            >
                              <p className="text-sm">{msg.message}</p>
                            </div>
                          </div>
                        ))}
                        
                        {chatLoading && (
                          <div className="flex justify-start">
                            <div className="bg-gray-100 dark:bg-gray-800 rounded-lg p-3">
                              <div className="flex space-x-1">
                                <div className="h-2 w-2 bg-gray-400 dark:bg-gray-500 rounded-full animate-bounce delay-0"></div>
                                <div className="h-2 w-2 bg-gray-400 dark:bg-gray-500 rounded-full animate-bounce delay-150"></div>
                                <div className="h-2 w-2 bg-gray-400 dark:bg-gray-500 rounded-full animate-bounce delay-300"></div>
                              </div>
                            </div>
                          </div>
                        )}
                      </div>
                    </ScrollArea>
                    
                    <form onSubmit={handleSendMessage} className="border-t p-3 flex gap-2">
                      <Input
                        value={chatMessage}
                        onChange={(e) => setChatMessage(e.target.value)}
                        placeholder="Ask a question about your document..."
                        disabled={chatLoading}
                        className="flex-1"
                      />
                      <Button type="submit" size="icon" disabled={chatLoading}>
                        <ArrowRight className="h-4 w-4" />
                      </Button>
                    </form>
                  </div>
                </CardContent>
              </Card>
            </TabsContent>
          </Tabs>
        </div>
      </div>
    </MainLayout>
  );
};

export default Features;
